# This file contains shared shell configuration which can be used
# both with zsh and bash. This content can also be used with oh-my-zsh.

source_if_exist=(
    "$HOME/perl5/perlbrew/etc/bashrc"
    "$HOME/.ghcup/env"
    "${HOME}/google-cloud-sdk/path.$(basename ${SHELL}).inc"
    "${HOME}/google-cloud-sdk/completion.$(basename ${SHELL}).inc"
    # RVM should be sourced last to make PATH work but we add it manually
    # anyways so ignore that.
    "$HOME/.rvm/scripts/rvm"
)

for f in $source_if_exist; do
    [ -f "$f" ] && . "$f"
done

# Use `exa` instead of `ls` if it's installed. And no matter which one is used,
# alias `l` to long listing format and `lr` to reverse long listing format.
if [ "$(exa -v 2> /dev/null)" ]; then
    alias l="exa -lh"
    alias la="exa -la"
    alias lr="exa -lh --sort newest"
else
    alias l="ls -lh"
    alias la="ls -la"
    alias lr="ls -lrth"
fi

# If nvim is installed, alias `vi` and `vim` to `nvim` - I will probably never
# learn to not just write `vi` to start my editor.
[ "$(nvim -v 2> /dev/null)" ] && \
    alias vi="nvim" && \
    alias vim="nvim"

alias glogin='gcloud auth login --update-adc'
alias fzff="fzf --height 100% --preview 'bat --style=numbers --color=always --line-range :500 {}'"

# Try to use colors no matter if it's actually supported.
export CLICOLOR=1;
export LSCOLORS=ExGxBxDxCxEgEdxbxgxcxd;
export LS_OPTIONS='--color=auto'
export COLORTERM=truecolor

# Support GPG signing for macOS.
# https://stackoverflow.com/a/42265848/96656
export GPG_TTY=$(tty)

export HISTCONTROL="ignoreboth"
export HISTSIZE=1000
export HISTFILESIZE=2000

export PAGER="less -R"
export LESS="-+F"
export EDITOR="nvim"
export VISUAL="nvim"

[ -e "/usr/local/go" ] && export GOROOT="/usr/local/go" # Darwin
[ -e "/usr/lib/go" ]   && export GOROOT="/usr/lib/go"   # Linux
export GOPATH="$HOME/go"
export GO111MODULE="auto"

# `dlv` and debugging Go doesn't work properly with these set
if [ $(uname -s) = "Darwin" ]; then
  export GOOS=darwin
  export GOARCH=arm64
fi

export RIPGREP_CONFIG_PATH="$HOME/.ripgreprc"

export FZF_DEFAULT_COMMAND='fd --type f'
export FZF_DEFAULT_OPTS='--height 50% --pointer  --marker  --layout reverse --info inline --border rounded --multi --cycle
  --color bg:#2E3440,fg:#ECEFF4,fg+:#E5E9F0,bg+:#3B4252
  --color border:#D8DEE9,spinner:#D8DEE9,prompt:#D8DEE9
  --color pointer:#BF616A,query:#E5E9F0,info:#A3BE8C'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_CTRL_T_OPTS="$FZF_DEFAULT_OPTS"

[ "$(npm --version 2> /dev/null)" ] && PATH="$PATH:$(npm bin)"

GOPATHS="$GOPATH/bin:$GOROOT/bin"
LOCALPATHS="$HOME/bin:$HOME/.bin:$HOME/.local/bin:/usr/local/bin"
PERLPATHS="$HOME/perl5/perlbrew/bin"
RUBYPATHS="$HOME/.rvm/bin"
RUSTPATHS="$HOME/.cargo/bin"
CIQPATHS="$HOME/.connectiq-sdk/bin"
JENVPATHS="$HOME/.jenv/bin"
RANCHER_DESKTOP_PATHS="$HOME/.rd/bin"
ZIGPATHS="$HOME/bin/zig"
NVIMPATHS="/usr/local/nvim/bin"

# Keg-only formulas refusing to link for macOS-provided software.
BREWPATHS="/usr/local/opt/curl/bin:/opt/homebrew/bin:/opt/homebrew/opt/coreutils/bin"

export PATH="$CIQPATHS:\
$RUSTPATHS:\
$GOPATHS:\
$PERLPATHS:\
$RUBYPATHS:\
$LOCALPATHS:\
$BREWPATHS:\
$JENVPATHS:\
$RANCHER_DESKTOP_PATHS:\
$ZIGPATHS:\
$NVIMPATHS:\
$PATH"

# We must add paths depending on brew after first updating PATH but it's only
# needed if we're on macOS/Darwin.
if [ "$(uname -s)" = "Darwin" ]; then
  LLVMPATHS="$(brew --prefix)/opt/llvm/bin"
  export PATH="$LLVMPATHS:$PATH"

  export LIBRARY_PATH="$(brew --prefix)/lib"
fi

export PLAYDATE_SDK_PATH="$HOME/Developer/PlaydateSDK"

# Init jenv
[ "$(jenv -v 2> /dev/null)" ] && eval "$(jenv init -)" || true

# Init pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"

[ "$(pyenv -v 2> /dev/null)" ] && eval "$(pyenv init --path)" || true
[ "$(pyenv -v 2> /dev/null)" ] && eval "$(pyenv init -)"      || true

# Init nvm
export NVM_DIR="$HOME/.nvm"

# macOS
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

# WSL/Linux
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Get the actual IP address of a Docker container.
function container_ip {
    docker inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" "${1:-}"
}

# Print a weather forecast to the screen. Takes the city to check as first
# argument.
function weather {
    curl "http://wttr.in/${1:-stockholm}"
}

# Wrap any command between a start and stop timestamp. The timestamps will be
# printed to STDERR so you can pipe your actual command's STDIN to a file and
# without messing up the logs.
function print-start-stop {
    echo >&2 "Starting command $1 at $(date)"
    $@
    echo >&2 "Done at $(date)"
}

# Remove ruby_prompt_info used in many zsh themes
function ruby_prompt_info { echo '' }

# Get the current git branch - if in a git repository.
function parse_git_branch {
    [ "$(which git)" ] || return

    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ [\1]/'
}

function jqvalid {
    pattern="${1:-.}"
    jq -R -r "fromjson? | $pattern"
}

function count_success {
    delay=${DELAY:-0}
    failure_log=${FAILURE_LOG:-failure.log}
    s=0
    f=0
    total_time=0

    printf "| %-10s | %-10s | %-10s | %-15s | %-14s\n" "total" "successful" "failed" "last duration" "avg duration"
    while true; do
        start_time=$(gdate +%s.%N)
        human_start_time=$(gdate "+%Y-%m-%d %H:%M:%S")

        if output=$($@ 2>&1); then
            ((s++))
        else
            ((f++))

            {
              echo "--- ATTEMPT $total $human_start_time"
              echo "$output"
              echo ""
            } >> "$failure_log"
        fi

        end_time=$(gdate +%s.%N)
        run_time=$(($end_time - $start_time))
        total_time=$(($total_time + $run_time))
        total=$(($s+$f))
        avg_time=$(($total_time / $total))

        printf "\r| %-10d | %-10d | %-10d | %-15.3f | %-15.3f" $total $s $f $run_time $avg_time
        sleep $delay
    done
}

function zsh_prompt {
    local EXITSTATUS="$?"
    local NONE="%f"    # Unsets color to term's fg color

    # Regular colors
    local K="%F{black}"
    local R="%F{red}"
    local G="%F{green}"
    local Y="%F{yellow}"
    local B="%F{blue}"
    local M="%F{magenta}"
    local C="%F{cyan}"
    local W="%F{white}"

    # Bolded colors
    local EMK="%B${K}%b"
    local EMR="%B${R}%b"
    local EMG="%B${G}%b"
    local EMY="%B${Y}%b"
    local EMB="%B${B}%b"
    local EMM="%B${M}%b"
    local EMC="%B${C}%b"
    local EMW="%B${W}%b"

    # Prompt prefix
    local PP="${PROMPT_PREFIX:-}"

    # Arrow color
    local AC="%(?.${EMY}.${EMR})"

    # User color, red for root
    local UC=$W
    [ $UID -eq "0" ] && UC=$R


    autoload -Uz vcs_info
    precmd_vcs_info() { vcs_info }
    precmd_functions+=( precmd_vcs_info )
    setopt prompt_subst
    zstyle ':vcs_info:git:*' formats ' [%b]'

    PROMPT="${PP}${AC}-> ${R}%1~${Y}\$vcs_info_msg_0_${NONE} "
}

function bash_prompt {
    local EXITSTATUS="$?"
    local NONE="\[\033[0m\]"    # Unsets color to term's fg color

    # Regular colors
    local K="\[\033[0;30m\]"    # Black
    local R="\[\033[0;31m\]"    # Red
    local G="\[\033[0;32m\]"    # Green
    local Y="\[\033[0;33m\]"    # Yellow
    local B="\[\033[0;34m\]"    # Blue
    local M="\[\033[0;35m\]"    # Magenta
    local C="\[\033[0;36m\]"    # Cyan
    local W="\[\033[0;37m\]"    # White

    # Bolded colors
    local EMK="\[\033[1;30m\]"
    local EMR="\[\033[1;31m\]"
    local EMG="\[\033[1;32m\]"
    local EMY="\[\033[1;33m\]"
    local EMB="\[\033[1;34m\]"
    local EMM="\[\033[1;35m\]"
    local EMC="\[\033[1;36m\]"
    local EMW="\[\033[1;37m\]"

    # Background colors
    local BGK="\[\033[40m\]"
    local BGR="\[\033[41m\]"
    local BGG="\[\033[42m\]"
    local BGY="\[\033[43m\]"
    local BGB="\[\033[44m\]"
    local BGM="\[\033[45m\]"
    local BGC="\[\033[46m\]"
    local BGW="\[\033[47m\]"

    # Prompt prefix
    local PP="${PROMPT_PREFIX:-}"

    # Arrow color
    local AC=$EMY
    [ "${EXITSTATUS}" -ne 0 ] && AC=$EMR

    # User color, red for root
    local UC=$W
    [ $UID -eq "0" ] && UC=$R

    # Without colors: PS1="[\u@\h \${NEW_PWD}]\\$ "
    # extra backslash in front of \$ to make bash colorize the prompt

    PS1="${PP}${AC}→ ${R}\\W${Y}$(parse_git_branch)${NONE} "
}

function __zshrc {
    # Fix bindkeys (^A, ^E)
    bindkey -e

    # Override theme prompt for oh-my-zsh
    ZSH_THEME_GIT_PROMPT_PREFIX="%{$fg_bold[white]%} on %{$fg_bold[yellow]%}\xee\x82\xa0 "
    ZSH_THEME_GIT_PROMPT_SUFFIX="%{$fg_bold[yellow]%}"
    ZSH_THEME_GIT_PROMPT_DIRTY=" %{$reset_color%}%{$fg_bold[red]%}*%{$reset_color%}"
    ZSH_THEME_GIT_PROMPT_CLEAN=""
    PROMPT='%{$fg_bold[green]%}%3c%{$reset_color%}$(git_prompt_info)
%{$fg_bold[white]%}› %{$reset_color%}'
    # zsh_prompt

    [ -f ~/.fzf.zsh ]                        && . ~/.fzf.zsh
    [ "$(starhsip --version 2> /dev/null)" ] && eval "$(starhsip init zsh)" || true
}

function __bashrc {
    # Source bash completions
    [ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion
    [ -f /etc/bash_completion ]           && . /etc/bash_completion
    [ -f ~/.fzf.bash ]                    && . ~/.fzf.bash

    # Enable globstar for bash (if supported)
    [ "$(shopt | grep globstar)" ] && shopt -s globstar

    # Silence Apple prompting they're now using zsh (if you for some reason isn't
    # running a separate installation of bash > 3.x)
    export BASH_SILENCE_DEPRECATION_WARNING=1

    PROMPT_COMMAND=bash_prompt
}

[ $(basename "$SHELL") = "bash" ] && __bashrc
[ $(basename "$SHELL") = "zsh" ]  && __zshrc

# vim: set ft=zsh:
